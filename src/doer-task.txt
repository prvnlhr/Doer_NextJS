admin/courses
admin/courses/[courseNameSlug]/edit/[courseId]
admin/courses/add


admin/courses/[courseNameSlug]/chapters  
admin/courses/[courseNameSlug]/chapters/add
admin/courses/[courseNameSlug]/chapters/[chapterNameSlug]/edit/[chapterId]

admin/courses/[courseNameSlug]/chapters/[chapterNameSlug]/topics
admin/courses/[courseNameSlug]/chapters/[chapterNameSlug]/topics/add
admin/courses/[courseNameSlug]/chapters/[chapterNameSlug]/topics/[topicNameSlug]/edit/[topicId]




> admin      admin/courses
  > courses
    page.js
 
> admin      admin/courses/[courseNameSlug]/edit/[courseId]
  > courses
    > add
      - page.js
    > [courseName]
      > edit
        > [courseId]
          - page.js

> admin     admin/courses/add
  > courses
    > add
      - page.js
    

 
> admin      admin/courses/[courseNameSlug]/chapters  (READ)
  > courses
    > [courseName]
      > chapters
        - page.js


> admin      admin/courses/[courseNameSlug]/chapters/add (CREATE)
  > courses
    > [courseName]
      > chapters
        > add
         - page.js


> admin      admin/courses/[courseNameSlug]/chapters/[chapterNameSlug]/edit/[chapterId]   (UPDATE)
  > courses
    > [courseName]
      > chapters
        > [chapterName]
          > edit
            > [chapterId]
              - page.js 



> admin      admin/courses/[courseNameSlug]/chapters/[chapterNameSlug]/topics   (READ)
  > courses
    > [courseName]
      > chapters
        > [chapterName]
          > topics
            - page.js 

> admin      admin/courses/[courseNameSlug]/chapters/[chapterNameSlug]/topics/add   (CREATE)
  > courses
    > [courseName]
      > chapters
        > [chapterName]
          > topics
            > add
              - page.js 


> admin      admin/courses/[courseNameSlug]/chapters/[chapterNameSlug]/topics/[topicNameSlug]/edit/[topicId]   (UPDATE)
  > courses
    > [courseName]
      > chapters
        > [chapterName]
          > topics
            > [topicName]
              > edit
                > [topicId]
                   - page.js

-----------------------------------------------------------------------------------------------------------------------------------------------------------------




admin/courses/add
admin/courses/[courseNameSlug]/chapters/add
admin/courses/[courseNameSlug]/chapters/[chapterNameSlug]/topics/add


admin/courses  
admin/courses/[courseNameSlug]/chapters 
admin/courses/[courseNameSlug]/chapters/[chapterNameSlug]/topics   


admin/courses/[courseNameSlug]/edit/[courseId]
admin/courses/[courseNameSlug]/chapters/[chapterNameSlug]/edit/[chapterId]
admin/courses/[courseNameSlug]/chapters/[chapterNameSlug]/topics/[topicNameSlug]/edit/[topicId]







const lastSegment = pathSegments.at(-1)

if(['courses','chapters','topics'].includes(lastSegment))  Show Add addBtn

if(lastSegment == add)  check secondLastSegment

else if()



-----------------------------------------------------------------------------------------------------------------------------------------------------------------


1. Either change folder structure


admin/courses
admin/courses/[courseNameSlug]/edit/[courseId]
admin/courses/add


admin/courses/[courseNameSlug]/edit/[courseId]
admin/courses/[courseNameSlug]/chapters  


admin/courses/[courseNameSlug]/edit/[courseId]
admin/courses/[courseNameSlug]/[courseId]/edit
admin/courses/[courseNameSlug]/[courseId]/chapters  


admin/courses/[courseNameSlug]/[courseId]/chapters  
admin/courses/[courseNameSlug]/chapters/[chapterNameSlug]/edit/[chapterId]



admin/courses/[courseNameSlug]/chapters/add
admin/courses/[courseNameSlug]/chapters/[chapterNameSlug]/edit/[chapterId]








// Only Show ADD COURSE, CHAPTER, TOPIC

admin/courses/add
admin/courses/[courseId]/chapters/add
admin/courses/[courseId]/chapters/[chapterId]/topics/add


admin/courses



admin/courses/[courseId]/edit
admin/courses/[courseId]/chapters  


admin/courses/[courseId]/chapters/[chapterId]/edit
admin/courses/[courseId]/chapters/[chapterId]/topics



admin/courses/[courseId]/chapters/[chapterId]/topics/[topicId]/edit





TAB1   TAB2

----------------------------------------------------------------
AUTH FLOW


1. SIGNUP
    - API route handler will handle the new users registeration
    - Checks DB if user exist or not, if not the create new user
    - send email with OTP

2. If user is register successfully
    - show a OTP verify form
    - user enter the OTP

3. Verifying user's OTP
    - Verify the OTP
    - if correct the user gets logged in

4. SIGNIN 
    - user enter the email
    - checks DB for email
    - if email present the show OTP verify form
    - next step same as step 3
   

 --------------------------------------------------------------------------------------------

 CLASSROOM PAGE


1. Topic can be bookmarked -> add bookmark icon at top of topic content [Done]

2. In Last opened we will keep topics ->  courseId, chapterId, topicId [Done]

3. In Progress -> show the course progress
    - Show number of chapters completed :
       -> number of chapters completed will depend on number of topic completed
       -> topic will be marked as completed when the time spent on a particular topic is more or equal
         to the mentioned duration of topic 

    - Show percentage of course completion :
       -> percentage of course completion can be calculated using the below formula
          
           num of topic completed in a course
           ---------------------------------- x 100
           total number of topic in a course



      courseProgress Schema

        
- userId
- courseId
- completed
- chapters : [
    - chapterId
    - completed
    - topics : [
        - topicId
        - completed
        ]
   ]


  api route handler will recieve this data

  const {userId} = params;
   const progressData =
   {
    "topicId": "668bbd5610b4d6f9266d1f61",
    "topicName": "Control Structures: Conditionals",
    "chapterId": "668b7f8ccb015f4ae03573ab",
    "chapterName": "Basics of JavaScript",
    "courseId": "66876aabac359b85b857fe18",
    "courseName": "Javascript Essentials 4",
    "chaptersCount": 6,
    "topicsCount": 3
}

  - find CourseProgress by userId and courseId

  - if not found then we need a insert new
  - else update

  > updating   

  1.find if chapter exists
    if exists
      - find if topic exists
      - if not then insert 
      - else do nothing

    else
      - insert the chapter
      - then add chapter 
        - add the  topic
        



  - add the topic to topics array
  - if topics length == topicsCount , then
    mark chapter as completed:true

  - chapters length == chaptersCount then
    mark the course as completed:true



  ------------------------------------------------- 


DATE MODELING ::

import mongoose from "mongoose";

// Schema to store bookmarked topics
const BookmarkTopicSchema = new mongoose.Schema({
  topicId: { type: mongoose.Schema.Types.ObjectId, ref: "Topic", required: true },
  topicName: { type: String, required: true },
  courseId: { type: mongoose.Schema.Types.ObjectId, ref: "Course", required: true },
  courseName: { type: String, required: true },
  chapterId: { type: mongoose.Schema.Types.ObjectId, ref: "Chapter", required: true },
  chapterName: { type: String, required: true },
  topicDuration: { type: Number, required: true },
}, { _id: false }); // _id: false to avoid creating an _id for each subdocument

// Schema to store last opened topics
const LastOpenedTopicSchema = new mongoose.Schema({
  topicId: { type: mongoose.Schema.Types.ObjectId, ref: "Topic", required: true },
  topicName: { type: String, required: true },
  courseId: { type: mongoose.Schema.Types.ObjectId, ref: "Course", required: true },
  courseName: { type: String, required: true },
  chapterId: { type: mongoose.Schema.Types.ObjectId, ref: "Chapter", required: true },
  chapterName: { type: String, required: true },
}, { _id: false }); // _id: false to avoid creating an _id for each subdocument

// Schema to track the completion status of courses, chapters, and topics
const CourseProgressSchema = new mongoose.Schema({
  courseId: { type: mongoose.Schema.Types.ObjectId, ref: "Course", required: true },
  completed: { type: Boolean, default: false },
  chapters: [{
    chapterId: { type: mongoose.Schema.Types.ObjectId, ref: "Chapter", required: true },
    completed: { type: Boolean, default: false },
    topics: [{
      topicId: { type: mongoose.Schema.Types.ObjectId, ref: "Topic", required: true },
      completed: { type: Boolean, default: false },
    }],
  }],
});

// Schema to encapsulate bookmarked and last opened topics, along with course progress
const CourseStateSchema = new mongoose.Schema({
  bookmarkedTopics: [BookmarkTopicSchema],
  lastOpenedTopics: [LastOpenedTopicSchema],
  courseProgress: [CourseProgressSchema],
});

// Schema to define user details including course state
const UserSchema = new mongoose.Schema({
  fullname: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  country: { type: String, required: true },
  otp: { type: String },
  otpExpiry: { type: Date },
  otpRequestCount: { type: Number, default: 0 },
  lastOtpRequestAt: { type: Date },
  courseState: {
    type: CourseStateSchema,
    default: {},
  },
}, { timestamps: true });

const User = mongoose.models.User || mongoose.model("User", UserSchema);

export default User;




-------------------------------------

bookmarking a topic ::

  - if already bookmarked remove [Done]
  - if not add to bookmark [Done]


last opened topic ::

  - first check if 'lastOpenedTopics' length is 10.
  - if length is  10 remove the oldest item and add new item
  - if length < 10 then add new item


course progress ::
 - if a user visits any topic at frontend and spents time  greater then or equal to topic's duration,
   then its consider completed. In this case add this topic's courseIdm chapterId and topicId to the 
   CourseProgressSchema. Course will be marked not completed = false chapter will be marked completed = false
   topicId will be added and will  be marked completed = true

- if completed topics equal to total topics then chapter itself is marked completed.
- if completed chapters equal to total chapter then course itself is marked completed.
   





api routes

GET /api/users/{userId}

GET /api/users/{userId}/bookmarks
POST /api/users/{userId}/bookmarks

GET /api/users/{userId}/last-opened
POST /api/users/{userId}/last-opened

GET /api/users/{userId}/course-progress
POST /api/users/{userId}/course-progress




















--------------------------------------------------------------

TODO ::
- show topic duration at topic content page
- add skeleton
- show only courses which chapters count 1 or more and similar for chapters 
- also show content which are only active 




-------------------------------------

- total days spent
- course completed


- user visits the topic page
  - time starts
- user leaves the topic page 
  - time ends

record this difference and add to the localstorge 

const diff  = endTime - startTime 
 
const timeSpentArr = [0, 1, 2, 3, 4, 5, 6]
                      0  0  0  0  0  0  0

timeSpentArr[dayOfWeekIndex] += diff

now if its monday 

sync the localstorge data with DB data

 - calculate the totalTime = localstorge timeSpentArr sum
 - DB totalTimeSpent = totalTime

- reset the localstorge timeSpentArr to [0, 0, 0 ....]


- days spent
- courses completed
- score -> (if we add mcq/quiz in future)

-----------------------------------------------------------------------------------------------

|>TODO ::

- public
  - universal search
  - topics page sidebar show checked icon
  - show loading spinner for bookmark toggle btn
  - fix accordion animation
  - fix accordion refresh page openinig the last opened accordion item  
  - fix topics page breadcrumbs

- admin
  - admin auth


|>DONE ::

- public
  - Landing page
  - Course List
  - Chapters List
  - topic page
  - public auth

- admin 
  - course add, edit, delete
  - chapter add, edit, delete
  - topic add, edit, delete

  



  
------------------------------------------------------------


localStorage courseState = {

   courseName:
   courseId:
   chapterName:
   chapterId:
   topicName:
   topicId:
   topicDuration:
}

- 1.  on clicking CourseCard set 
      - courseState ={
         courseName: 
         courseId
      }

- 2.  on clicking ChapterCard set 
      - courseState ={
         courseName: 
         courseId:
         chapterName:
         chapterId:
         topicName: chapter's first topic's name
         topicId:  chapter's first topic's id
         topicsCount : chapter's topicsCount
      }

- 3. Topic Page
     - Accordion
       - on clicking chapter
         repeat step 2   

       - on clicking chapter's  topic
         courseState ={
            courseName: 
            courseId:
            chapterName:
            chapterId:
            topicName: clicked topic's name
            topicId: clicked topic's id
            topicsCount : no need to set
      }

----------------------------


context
- completedTopics : []


CONCERNS::
1. completed topics [Done] -> needs to test
2. bookmark


1)
- topics page 
- fetching => chapters and their topics list from DB
           => completed topicsIds from DB

    - marking a topic complete -> OK
    - response is the id of marked topic itself

    what if we checked the completed topic status from context's 'completedTopics :[]'


    fetching completed topicsIds from DB and update context's completedTopics:[]
    when we mark the topic complete then, on basis of reponse update context's  completedTopics

    CRUX: keep context's completedTopics:[] and DB's completed topics sync


2)
- classrom page fetching all the bookmarks and showing -> OK

topics page
- book-marking the topic

- to check if a topic is bookmarked we need
  topics id in any array

- on classroom page we need,
- course name, chapterName, topicName
- courseId, chapterId, topicId, topic duration



------------------------------------------------------------------
CACHING AND REVALIDATION

COURSE ::
- creating a new course
  - all courses list

- deleting a course
  - all courses list

- udpating a course
  - the course which has been edited
  - all courses list

CHAPTER ::
- creating a chapter
  - all chapters list
  - all courses list

- deleting a chapter
  - all chapters list
  - all courses list

- updating a topic
  - chapter edit route
  - all chapters list

TOPIC :: 

- updating a topic
  - topic edit route
  - all topics list

- creating a new topic
  - all topics list
  - all chapters list

- deleting a topic
  - all topics list
  - all chapters list



----------------------------------------------




- localstorage
  - dailyTimeSpent [0,1,2,3,4,5,6]
  - totalTimeSpentWeekly = 0

- DB
  - totalTimeSpent

- when topic component mounts record the startTime
- when topic component unmounts record the endTime
- timeSpent = diff = endTime - startTime
  
  diff should be recorded to localStorge dailyTimeSpent
  dailyTimeSpent[dayOfWeek] += diff -> only if user is logged in
  totalTimeSpentWeekly += diff ->  only if user is logged in


steps : 

1. We need to record users time spent in minutes on topic content page -> totalTimeSpentWeekly = 0
    - when topic component mounts record the startTime
    - when topic component unmounts record the endTime
    - timeSpent = diff = endTime - startTime
    => totalTimeSpentWeekly += timeSpent

2. We also needs to record time spent per day of the week -> dailyTimeSpent[0,1,2,3,4,5,6]
    - when topic component mounts record the startTime
    - when topic component unmounts record the endTime
    - timeSpent = diff = endTime - startTime
    => dailyTimeSpent[dayOfWeek] += timeSpent
  
3. At Classroom page
   - we need to show weekly time for each day
     - just render the graph with data of dailyTimeSpent[]

   - show total time spent in a week '2h 25m'
     - convert the totalTimeSpentWeekly to hours and minutes and show it

   - show total days spent
     - 





M   T   W   T   F   S   S
12  10  5   8   21  62  7 = total = 125

- on monday reset the data in localStorage
- sync the totalTimeSpentWeekly to DB
  - DB:: totalTimeSpent += totalTimeSpentWeekly


M   T   W   T   F   S   S
5   8   10  6             = total = 29
                          = totalTimeSpentWeekly = 29



on every monday we need to sync the data with DB and reset the localStorage data 
    - but what if user never visited on monday
|
M   T   W   T   F   S   S
12  20  5   7   21  62  7  = total = 125    DB::totalTimeSpent = 125
5   8   10  6              = total = 29     DB::totalTimeSpent = 125 + 29 = 154
10  5   20  6   2   1   3  = total = 47     DB::totalTimeSpent = 125 + 29 + 47 = 201
         5  10  20  10  5  = total = 50     DB::totalTimeSpent = 125 + 29 + 47 + 50 =  251

we need to maintain a key which tell when was the data last synced
 - localStorge = lastSyncDate

  if currentMonday > lastSyncDate 
  - sync  and reset



--------------------------------------------------------

- TopicPage first
  - if monday:
    - mount
      - check if data is old/previous weeks data
      - if 'yes' then reset the DB and populate the LS with default data
      - if 'no' then populate the LS with DB data

    - unmount
      - sync the LS data with DB
      - reset the LS data
    
  - not monday:
    - mount 
      - get data from DB and populate LS
    - unmount
      - sync LS data to DB
      - reset the LS data

- Classroom Page first
  - if monday
    - mount
      - check if DB data is old/previous weeks data
      - if 'yes' then reset DB and populate the LS with default data
      - if 'no' then populate the LS with DB data
    - unmount
      - Do nothing

  - not monday
    - mount
      - get the data from DB populate the DB data in LS
    - unmount
      - Do nothing

- so on monday we are reseting the DB day as its the start of week
- but what if user visited the app on wednesday and have data in DB which is previous weeks


- on monday we reset that data in DB. let say at first visit on monday we reset 
  the DB data.
- Now on second or third..  visit we dont wont to reset it again and again



-------------------------------------------------
 

- TopicPage mount and unmount

- TopicContent mount and unmount

- Graph component mount and unmount

